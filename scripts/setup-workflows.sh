#!/bin/bash

# Phoenix System - Workflow Setup Script
# Este script configura todos os workflows e secrets necess√°rios para o sistema Phoenix

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# Banner
echo -e "${PURPLE}"
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ PHOENIX SYSTEM                          ‚ïë
‚ïë                  Workflow Setup Script                        ‚ïë
‚ïë                                                               ‚ïë
‚ïë  Configura√ß√£o automatizada de workflows GitHub Actions       ‚ïë
‚ïë  com matriz complexa e automa√ß√£o avan√ßada                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verificar pr√©-requisitos
log "Verificando pr√©-requisitos..."

# Verificar se est√° no diret√≥rio correto
if [[ ! -f "README.md" ]] || [[ ! -d ".github/workflows" ]]; then
    error "Execute este script no diret√≥rio raiz do projeto Phoenix"
    exit 1
fi

# Verificar GitHub CLI
if ! command -v gh &> /dev/null; then
    error "GitHub CLI (gh) n√£o est√° instalado. Instale: https://cli.github.com/"
    exit 1
fi

# Verificar Azure CLI
if ! command -v az &> /dev/null; then
    error "Azure CLI n√£o est√° instalado. Instale: https://docs.microsoft.com/cli/azure/install-azure-cli"
    exit 1
fi

# Verificar se est√° logado no GitHub
if ! gh auth status &> /dev/null; then
    error "N√£o est√° autenticado no GitHub. Execute: gh auth login"
    exit 1
fi

# Verificar se est√° logado no Azure
if ! az account show &> /dev/null; then
    error "N√£o est√° autenticado no Azure. Execute: az login"
    exit 1
fi

success "Todos os pr√©-requisitos atendidos"

# Obter informa√ß√µes do reposit√≥rio
REPO_OWNER=$(gh repo view --json owner --jq '.owner.login')
REPO_NAME=$(gh repo view --json name --jq '.name')
REPO_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}"

log "Reposit√≥rio: ${REPO_URL}"

# Menu de op√ß√µes
echo ""
echo -e "${CYAN}Selecione uma op√ß√£o:${NC}"
echo "1. üîß Setup completo (recomendado)"
echo "2. üîê Configurar apenas secrets"
echo "3. üìä Validar workflows existentes"
echo "4. üß™ Testar workflows localmente"
echo "5. üìã Gerar documenta√ß√£o"
echo "6. üöÄ Deploy inicial"
echo ""

read -r -p "Digite sua escolha (1-6): " choice

case $choice in
    1)
        log "Iniciando setup completo..."
        SETUP_TYPE="full"
        ;;
    2)
        log "Configurando apenas secrets..."
        SETUP_TYPE="secrets"
        ;;
    3)
        log "Validando workflows..."
        SETUP_TYPE="validate"
        ;;
    4)
        log "Testando workflows localmente..."
        SETUP_TYPE="test"
        ;;
    5)
        log "Gerando documenta√ß√£o..."
        SETUP_TYPE="docs"
        ;;
    6)
        log "Executando deploy inicial..."
        SETUP_TYPE="deploy"
        ;;
    *)
        error "Op√ß√£o inv√°lida"
        exit 1
        ;;
esac

# Fun√ß√£o para configurar secrets
setup_secrets() {
    log "Configurando secrets do GitHub..."
    
    # Verificar se o arquivo de secrets existe
    if [[ ! -f ".github/SECRETS.md" ]]; then
        error "Arquivo .github/SECRETS.md n√£o encontrado"
        return 1
    fi
    
    # Obter informa√ß√µes do Azure
    SUBSCRIPTION_ID=$(az account show --query id -o tsv)
    TENANT_ID=$(az account show --query tenantId -o tsv)
    
    log "Subscription ID: $SUBSCRIPTION_ID"
    log "Tenant ID: $TENANT_ID"
    
    # Criar Service Principal se n√£o existir
    SP_NAME="phoenix-system-github-${REPO_NAME}"
    
    if az ad sp list --display-name "$SP_NAME" --query '[0].appId' -o tsv | grep -q .; then
        warning "Service Principal j√° existe: $SP_NAME"
        CLIENT_ID=$(az ad sp list --display-name "$SP_NAME" --query '[0].appId' -o tsv)
        
        # Tentar extrair secrets existentes se AZURE_CREDENTIALS estiver configurado
        if gh secret list | grep -q "AZURE_CREDENTIALS"; then
            log "Verificando se secrets individuais est√£o configurados..."
            
            # Verificar se os secrets individuais existem
            if ! gh secret list | grep -q "AZURE_CLIENT_ID"; then
                warning "AZURE_CLIENT_ID n√£o configurado, mas AZURE_CREDENTIALS existe"
                warning "Para usar a nova autentica√ß√£o, configure os secrets individuais"
            fi
        fi
    else
        log "Criando Service Principal: $SP_NAME"
        
        SP_OUTPUT=$(az ad sp create-for-rbac \
            --name "$SP_NAME" \
            --role contributor \
            --scopes "/subscriptions/$SUBSCRIPTION_ID" \
            --sdk-auth)
            
        CLIENT_ID=$(echo "$SP_OUTPUT" | jq -r '.clientId')
        CLIENT_SECRET=$(echo "$SP_OUTPUT" | jq -r '.clientSecret')
        
        success "Service Principal criado com sucesso"
        
        # Configurar secrets principais
        log "Configurando secrets principais..."
        
        # AZURE_CLIENT_ID
        echo "$CLIENT_ID" | gh secret set AZURE_CLIENT_ID
        success "AZURE_CLIENT_ID configurado"
        
        # AZURE_CLIENT_SECRET
        echo "$CLIENT_SECRET" | gh secret set AZURE_CLIENT_SECRET
        success "AZURE_CLIENT_SECRET configurado"
        
        # AZURE_SUBSCRIPTION_ID
        echo "$SUBSCRIPTION_ID" | gh secret set AZURE_SUBSCRIPTION_ID
        success "AZURE_SUBSCRIPTION_ID configurado"
        
        # AZURE_TENANT_ID
        echo "$TENANT_ID" | gh secret set AZURE_TENANT_ID
        success "AZURE_TENANT_ID configurado"
        
        # AZURE_CREDENTIALS (for backward compatibility, if needed)
        echo "$SP_OUTPUT" | gh secret set AZURE_CREDENTIALS
        success "AZURE_CREDENTIALS configurado (backward compatibility)"
        echo "$CLIENT_ID" | gh secret set AZURE_CLIENT_ID
        echo "$CLIENT_SECRET" | gh secret set AZURE_CLIENT_SECRET
        
        success "Secrets do Azure configurados"
    fi
    
    # Configurar outros secrets interativamente
    setup_interactive_secrets
}

# Fun√ß√£o para configurar secrets interativamente
setup_interactive_secrets() {
    log "Configura√ß√£o interativa de secrets..."
    
    # OpenAI API Key
    if ! gh secret list | grep -q "OPENAI_API_KEY"; then
        echo ""
        read -r -p "Digite sua OpenAI API Key (ou pressione Enter para pular): " openai_key
        if [[ -n "$openai_key" ]]; then
            echo "$openai_key" | gh secret set OPENAI_API_KEY
            success "OPENAI_API_KEY configurado"
        fi
    fi
    
    # Teams Webhook URL
    if ! gh secret list | grep -q "TEAMS_WEBHOOK_URL"; then
        echo ""
        read -r -p "Digite a URL do webhook do Teams (ou pressione Enter para pular): " teams_webhook
        if [[ -n "$teams_webhook" ]]; then
            echo "$teams_webhook" | gh secret set TEAMS_WEBHOOK_URL
            success "TEAMS_WEBHOOK_URL configurado"
        fi
    fi
    
    # Slack Webhook URL
    if ! gh secret list | grep -q "SLACK_WEBHOOK_URL"; then
        echo ""
        read -r -p "Digite a URL do webhook do Slack (ou pressione Enter para pular): " slack_webhook
        if [[ -n "$slack_webhook" ]]; then
            echo "$slack_webhook" | gh secret set SLACK_WEBHOOK_URL
            success "SLACK_WEBHOOK_URL configurado"
        fi
    fi
    
    # Deployment Approvers
    if ! gh secret list | grep -q "DEPLOYMENT_APPROVERS"; then
        echo ""
        read -r -p "Digite os usu√°rios aprovadores (separados por v√≠rgula): " approvers
        if [[ -n "$approvers" ]]; then
            echo "$approvers" | gh secret set DEPLOYMENT_APPROVERS
            success "DEPLOYMENT_APPROVERS configurado"
        fi
    fi
}

# Fun√ß√£o para validar workflows
validate_workflows() {
    log "Validando workflows..."
    
    local workflows=(
        ".github/workflows/phoenix-basic.yml"
        ".github/workflows/phoenix-infrastructure-ultimate.yml"
        ".github/workflows/phoenix-applications-ultimate.yml"
        ".github/workflows/phoenix-monitoring-ultimate.yml"
    )
    
    for workflow in "${workflows[@]}"; do
        if [[ -f "$workflow" ]]; then
            success "$(basename "$workflow") existe"
            
            # Validar sintaxe YAML
            if command -v yamllint &> /dev/null; then
                if yamllint "$workflow" &> /dev/null; then
                    success "$(basename "$workflow") - sintaxe v√°lida"
                else
                    warning "$(basename "$workflow") - problemas de sintaxe"
                fi
            fi
        else
            error "$(basename "$workflow") n√£o encontrado"
        fi
    done
}

# Fun√ß√£o para testar workflows localmente
test_workflows() {
    log "Testando workflows localmente..."
    
    # Instalar act se n√£o estiver dispon√≠vel
    if ! command -v act &> /dev/null; then
        warning "act n√£o est√° instalado. Instalando..."
        
        if command -v brew &> /dev/null; then
            brew install act
        elif command -v curl &> /dev/null; then
            curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash
        else
            error "N√£o foi poss√≠vel instalar act automaticamente"
            info "Instale manualmente: https://github.com/nektos/act"
            return 1
        fi
    fi
    
    # Testar workflow de CI/CD
    log "Testando workflow de CI/CD..."
    act -W .github/workflows/phoenix-cicd.yml --dry-run
    
    success "Teste de workflows conclu√≠do"
}

# Fun√ß√£o para gerar documenta√ß√£o
generate_docs() {
    log "Gerando documenta√ß√£o..."
    
    # Criar README dos workflows
    cat > .github/workflows/README.md << 'EOF'
# üöÄ Phoenix System - GitHub Actions Workflows

Este diret√≥rio cont√©m os workflows GitHub Actions para o sistema Phoenix, implementando CI/CD avan√ßado com matriz complexa e automa√ß√£o inteligente.

## üìã Workflows Dispon√≠veis

### üèóÔ∏è phoenix-infrastructure.yml
**Prop√≥sito:** Provisionamento e gerenciamento da infraestrutura Azure com Terraform

**Triggers:**
- Push em `main`, `develop`
- Pull requests para `main`
- Execu√ß√£o manual

**Caracter√≠sticas:**
- Matriz din√¢mica por ambiente e prioridade
- Deploy paralelo de m√≥dulos Terraform
- Valida√ß√£o p√≥s-deploy
- Rollback autom√°tico em falhas

### üöÄ phoenix-applications.yml
**Prop√≥sito:** Build e deploy das aplica√ß√µes (Azure Functions, AKS, Copilot Studio)

**Triggers:**
- Push em branches principais
- Pull requests
- Execu√ß√£o manual

**Caracter√≠sticas:**
- An√°lise de mudan√ßas inteligente
- Matriz complexa de testes e builds
- Estrat√©gias de deploy avan√ßadas (rolling, blue-green, canary)
- Testes p√≥s-deploy automatizados

### üìä phoenix-monitoring.yml
**Prop√≥sito:** Monitoramento cont√≠nuo e observabilidade do sistema

**Triggers:**
- Agendamento (a cada 15 minutos)
- Push em arquivos de monitoramento
- Execu√ß√£o manual

**Caracter√≠sticas:**
- Health checks distribu√≠dos
- Monitoramento de performance
- An√°lise de seguran√ßa
- An√°lise de custos
- Sistema de alertas inteligente

### üîÑ phoenix-cicd.yml
**Prop√≥sito:** Pipeline CI/CD principal com orquestra√ß√£o avan√ßada

**Triggers:**
- Push em qualquer branch
- Pull requests
- Releases
- Execu√ß√£o manual

**Caracter√≠sticas:**
- Orquestra√ß√£o din√¢mica de pipeline
- Matriz de testes paralelos com depend√™ncias
- Build multi-plataforma
- Deploy com aprova√ß√µes
- Relat√≥rios detalhados

## üéØ Matriz Complexa

Os workflows utilizam matrizes din√¢micas que se adaptam baseado em:

- **Escopo de mudan√ßas:** Detecta automaticamente quais componentes foram alterados
- **Ambiente alvo:** Diferentes configura√ß√µes por ambiente (dev/staging/prod)
- **Tipo de deploy:** Estrat√©gias adaptativas baseadas no ambiente
- **Depend√™ncias:** Execu√ß√£o sequencial ou paralela baseada em depend√™ncias

## üîê Secrets Necess√°rios

Consulte `.github/SECRETS.md` para a lista completa de secrets necess√°rios.

## üöÄ Como Usar

### Deploy Manual
```bash
# Deploy para desenvolvimento
gh workflow run phoenix-applications.yml -f environment=dev

# Deploy para produ√ß√£o com aprova√ß√£o
gh workflow run phoenix-applications.yml -f environment=prod -f deployment_type=blue-green
```

### Monitoramento
```bash
# Executar monitoramento completo
gh workflow run phoenix-monitoring.yml -f monitoring_type=all

# An√°lise de custos espec√≠fica
gh workflow run phoenix-monitoring.yml -f monitoring_type=cost-analysis
```

### Infraestrutura
```bash
# Provisionar infraestrutura
gh workflow run phoenix-infrastructure.yml -f environment=dev

# Destruir infraestrutura (cuidado!)
gh workflow run phoenix-infrastructure.yml -f destroy_infrastructure=true
```

## üìä Dashboards

- **GitHub Actions:** Visualiza√ß√£o nativa do GitHub
- **Azure Monitor:** M√©tricas de infraestrutura e aplica√ß√£o
- **Application Insights:** Telemetria detalhada das aplica√ß√µes

## üîß Troubleshooting

### Falhas Comuns

1. **Secrets n√£o configurados**
   - Verifique `.github/SECRETS.md`
   - Execute `scripts/setup-workflows.sh`

2. **Falhas de autentica√ß√£o Azure**
   - Verifique Service Principal
   - Renove credenciais se necess√°rio

3. **Timeouts em deploy**
   - Verifique recursos Azure
   - Ajuste timeouts nos workflows

### Logs e Debugging

- Use `gh run list` para listar execu√ß√µes
- Use `gh run view <run-id>` para detalhes
- Ative debug com `ACTIONS_STEP_DEBUG=true`

## üìû Suporte

- üìß Email: devops@phoenix-system.com
- üí¨ Teams: Phoenix DevOps Channel
- üêõ Issues: GitHub Issues deste reposit√≥rio
EOF

    success "Documenta√ß√£o gerada em .github/workflows/README.md"
}

# Fun√ß√£o para deploy inicial
initial_deploy() {
    log "Executando deploy inicial..."
    
    # Verificar se os secrets est√£o configurados
    local required_secrets=("AZURE_CREDENTIALS" "AZURE_SUBSCRIPTION_ID" "OPENAI_API_KEY")
    
    for secret in "${required_secrets[@]}"; do
        if ! gh secret list | grep -q "$secret"; then
            error "Secret obrigat√≥rio n√£o configurado: $secret"
            info "Execute primeiro: $0 com op√ß√£o 2 (configurar secrets)"
            return 1
        fi
    done
    
    # Executar workflow de infraestrutura
    log "Iniciando provisionamento da infraestrutura..."
    gh workflow run phoenix-infrastructure.yml -f environment=dev
    
    # Aguardar conclus√£o
    log "Aguardando conclus√£o do workflow..."
    sleep 30
    
    # Verificar status
    LATEST_RUN=$(gh run list --workflow=phoenix-infrastructure.yml --limit=1 --json databaseId --jq '.[0].databaseId')
    
    if [[ -n "$LATEST_RUN" ]]; then
        info "Workflow iniciado. ID: $LATEST_RUN"
        info "Acompanhe o progresso: gh run view $LATEST_RUN"
        info "Ou acesse: ${REPO_URL}/actions/runs/${LATEST_RUN}"
    fi
    
    success "Deploy inicial iniciado com sucesso"
}

# Executar a√ß√£o baseada na escolha
case $SETUP_TYPE in
    "full")
        setup_secrets
        validate_workflows
        generate_docs
        
        echo ""
        read -r -p "Deseja executar o deploy inicial? (y/N): " deploy_choice
        if [[ "$deploy_choice" =~ ^[Yy]$ ]]; then
            initial_deploy
        fi
        ;;
    "secrets")
        setup_secrets
        ;;
    "validate")
        validate_workflows
        ;;
    "test")
        test_workflows
        ;;
    "docs")
        generate_docs
        ;;
    "deploy")
        initial_deploy
        ;;
esac

# Resumo final
echo ""
echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë                    ‚úÖ SETUP CONCLU√çDO                         ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

info "Pr√≥ximos passos:"
echo "1. üìã Revise os workflows em .github/workflows/"
echo "2. üîê Configure secrets adicionais se necess√°rio"
echo "3. üöÄ Execute um deploy de teste"
echo "4. üìä Configure monitoramento e alertas"
echo "5. üìñ Leia a documenta√ß√£o em .github/workflows/README.md"

echo ""
info "Comandos √∫teis:"
echo "‚Ä¢ gh workflow list                    # Listar workflows"
echo "‚Ä¢ gh run list                         # Listar execu√ß√µes"
echo "‚Ä¢ gh secret list                      # Listar secrets"
echo "‚Ä¢ gh workflow run <workflow> -f key=value  # Executar workflow"

echo ""
success "Sistema Phoenix configurado com sucesso! üéâ"

