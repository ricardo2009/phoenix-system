apiVersion: apps/v1
kind: Deployment
metadata:
  name: phoenix-ecommerce
  namespace: phoenix-system
  labels:
    app: phoenix-ecommerce
    version: v1.0.0
    component: frontend
    part-of: phoenix-system
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: phoenix-ecommerce
  template:
    metadata:
      labels:
        app: phoenix-ecommerce
        version: v1.0.0
        component: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: phoenix-ecommerce-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: ecommerce-app
        image: phoenixsystem/ecommerce-demo:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: HOST
          value: "0.0.0.0"
        - name: APP_NAME
          value: "phoenix-ecommerce"
        - name: ENVIRONMENT
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Configurações do Phoenix
        - name: PHOENIX_ORCHESTRATOR_URL
          valueFrom:
            configMapKeyRef:
              name: phoenix-config
              key: orchestrator-url
        - name: PHOENIX_FUNCTION_KEY
          valueFrom:
            secretKeyRef:
              name: phoenix-secrets
              key: function-key
        # Configurações do banco de dados
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: phoenix-secrets
              key: mongodb-uri
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: phoenix-secrets
              key: redis-url
        # Configurações de observabilidade
        - name: APPLICATION_INSIGHTS_KEY
          valueFrom:
            secretKeyRef:
              name: phoenix-secrets
              key: app-insights-key
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: phoenix-ecommerce-config
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - phoenix-ecommerce
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: phoenix-ecommerce-service
  namespace: phoenix-system
  labels:
    app: phoenix-ecommerce
    component: frontend
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: phoenix-ecommerce

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: phoenix-ecommerce-sa
  namespace: phoenix-system
  labels:
    app: phoenix-ecommerce

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: phoenix-system
  name: phoenix-ecommerce-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: phoenix-ecommerce-rolebinding
  namespace: phoenix-system
subjects:
- kind: ServiceAccount
  name: phoenix-ecommerce-sa
  namespace: phoenix-system
roleRef:
  kind: Role
  name: phoenix-ecommerce-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: phoenix-ecommerce-config
  namespace: phoenix-system
  labels:
    app: phoenix-ecommerce
data:
  app.json: |
    {
      "name": "Phoenix E-commerce Demo",
      "version": "1.0.0",
      "features": {
        "chaos_engineering": true,
        "metrics_collection": true,
        "phoenix_integration": true
      },
      "monitoring": {
        "prometheus": true,
        "application_insights": true
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: phoenix-config
  namespace: phoenix-system
  labels:
    app: phoenix-system
data:
  orchestrator-url: "https://func-orchestrator-phoenix-dev.azurewebsites.net/api"
  diagnostic-url: "https://func-diagnostic-phoenix-dev.azurewebsites.net/api"
  resolution-url: "https://func-resolution-phoenix-dev.azurewebsites.net/api"
  communication-url: "https://func-communication-phoenix-dev.azurewebsites.net/api"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: phoenix-ecommerce-pdb
  namespace: phoenix-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: phoenix-ecommerce

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: phoenix-ecommerce-hpa
  namespace: phoenix-system
  labels:
    app: phoenix-ecommerce
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: phoenix-ecommerce
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

